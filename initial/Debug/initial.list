
initial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c60  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e34  08002e34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e3c  08002e3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002e50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002e50  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000983f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000161a  00000000  00000000  0002987b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209fa  00000000  00000000  0002c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b083  00000000  00000000  0004cb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca3dd  00000000  00000000  00057bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121fda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e0  00000000  00000000  0012202c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e0c 	.word	0x08002e0c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002e0c 	.word	0x08002e0c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fd21 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f91b 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fb1b 	bl	8000b50 <MX_GPIO_Init>
  MX_TIM2_Init();
 800051a:	f000 fa23 	bl	8000964 <MX_TIM2_Init>
  MX_TIM4_Init();
 800051e:	f000 faa1 	bl	8000a64 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000522:	f000 f97f 	bl	8000824 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000526:	2100      	movs	r1, #0
 8000528:	487e      	ldr	r0, [pc, #504]	; (8000724 <main+0x21c>)
 800052a:	f001 fe13 	bl	8002154 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800052e:	2104      	movs	r1, #4
 8000530:	487d      	ldr	r0, [pc, #500]	; (8000728 <main+0x220>)
 8000532:	f001 fe0f 	bl	8002154 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000536:	210c      	movs	r1, #12
 8000538:	487a      	ldr	r0, [pc, #488]	; (8000724 <main+0x21c>)
 800053a:	f001 fe0b 	bl	8002154 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800053e:	2100      	movs	r1, #0
 8000540:	487a      	ldr	r0, [pc, #488]	; (800072c <main+0x224>)
 8000542:	f001 fe07 	bl	8002154 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  htim2.Instance-> CCR1 = pwm_val;
 8000546:	4b7a      	ldr	r3, [pc, #488]	; (8000730 <main+0x228>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b76      	ldr	r3, [pc, #472]	; (8000724 <main+0x21c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	635a      	str	r2, [r3, #52]	; 0x34
	  pwm_val=80;
 8000550:	4b77      	ldr	r3, [pc, #476]	; (8000730 <main+0x228>)
 8000552:	2250      	movs	r2, #80	; 0x50
 8000554:	601a      	str	r2, [r3, #0]
	  htim4.Instance-> CCR2 = pwm_val2;
 8000556:	4b77      	ldr	r3, [pc, #476]	; (8000734 <main+0x22c>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	4b73      	ldr	r3, [pc, #460]	; (8000728 <main+0x220>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	639a      	str	r2, [r3, #56]	; 0x38
	  pwm_val2=80;
 8000560:	4b74      	ldr	r3, [pc, #464]	; (8000734 <main+0x22c>)
 8000562:	2250      	movs	r2, #80	; 0x50
 8000564:	601a      	str	r2, [r3, #0]
	  htim1.Instance-> CCR1 = pwm_val3;
 8000566:	4b74      	ldr	r3, [pc, #464]	; (8000738 <main+0x230>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4b70      	ldr	r3, [pc, #448]	; (800072c <main+0x224>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	635a      	str	r2, [r3, #52]	; 0x34
	  pwm_val3=80;
 8000570:	4b71      	ldr	r3, [pc, #452]	; (8000738 <main+0x230>)
 8000572:	2250      	movs	r2, #80	; 0x50
 8000574:	601a      	str	r2, [r3, #0]
	  htim2.Instance-> CCR4 = pwm_val4;
 8000576:	4b71      	ldr	r3, [pc, #452]	; (800073c <main+0x234>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4b6a      	ldr	r3, [pc, #424]	; (8000724 <main+0x21c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	641a      	str	r2, [r3, #64]	; 0x40
	  pwm_val4=80;
 8000580:	4b6e      	ldr	r3, [pc, #440]	; (800073c <main+0x234>)
 8000582:	2250      	movs	r2, #80	; 0x50
 8000584:	601a      	str	r2, [r3, #0]
	  for(int i=0;i<4;i++){
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	e047      	b.n	800061c <main+0x114>
		  int a=0;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
		  int b=0;
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_WritePin(GPIOC, dc1_Pin, a);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	461a      	mov	r2, r3
 800059a:	2104      	movs	r1, #4
 800059c:	4868      	ldr	r0, [pc, #416]	; (8000740 <main+0x238>)
 800059e:	f000 ffe9 	bl	8001574 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, dc2_Pin, b);
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	2108      	movs	r1, #8
 80005aa:	4865      	ldr	r0, [pc, #404]	; (8000740 <main+0x238>)
 80005ac:	f000 ffe2 	bl	8001574 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, dc3_Pin, b);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ba:	4862      	ldr	r0, [pc, #392]	; (8000744 <main+0x23c>)
 80005bc:	f000 ffda 	bl	8001574 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, dc4_Pin, a);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	485e      	ldr	r0, [pc, #376]	; (8000744 <main+0x23c>)
 80005cc:	f000 ffd2 	bl	8001574 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, DC1_Pin, b);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	461a      	mov	r2, r3
 80005d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005da:	485b      	ldr	r0, [pc, #364]	; (8000748 <main+0x240>)
 80005dc:	f000 ffca 	bl	8001574 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, DC2_Pin, a);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	4857      	ldr	r0, [pc, #348]	; (8000748 <main+0x240>)
 80005ec:	f000 ffc2 	bl	8001574 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, DC3_Pin, a);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	2102      	movs	r1, #2
 80005f8:	4853      	ldr	r0, [pc, #332]	; (8000748 <main+0x240>)
 80005fa:	f000 ffbb 	bl	8001574 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, DC4_Pin, b);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000608:	484f      	ldr	r0, [pc, #316]	; (8000748 <main+0x240>)
 800060a:	f000 ffb3 	bl	8001574 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800060e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000612:	f000 fd11 	bl	8001038 <HAL_Delay>
	  for(int i=0;i<4;i++){
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	2b03      	cmp	r3, #3
 8000620:	ddb4      	ble.n	800058c <main+0x84>
	  }
	  for(int i=0;i<5;i++){
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	e047      	b.n	80006b8 <main+0x1b0>
	  	  int a=0;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
	  	  int b=0;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
	  	  HAL_GPIO_WritePin(GPIOC, dc1_Pin, a);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	461a      	mov	r2, r3
 8000636:	2104      	movs	r1, #4
 8000638:	4841      	ldr	r0, [pc, #260]	; (8000740 <main+0x238>)
 800063a:	f000 ff9b 	bl	8001574 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOC, dc2_Pin, b);
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	461a      	mov	r2, r3
 8000644:	2108      	movs	r1, #8
 8000646:	483e      	ldr	r0, [pc, #248]	; (8000740 <main+0x238>)
 8000648:	f000 ff94 	bl	8001574 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOA, dc3_Pin, b);
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000656:	483b      	ldr	r0, [pc, #236]	; (8000744 <main+0x23c>)
 8000658:	f000 ff8c 	bl	8001574 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOA, dc4_Pin, a);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	461a      	mov	r2, r3
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	4837      	ldr	r0, [pc, #220]	; (8000744 <main+0x23c>)
 8000668:	f000 ff84 	bl	8001574 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, DC1_Pin, b);
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000676:	4834      	ldr	r0, [pc, #208]	; (8000748 <main+0x240>)
 8000678:	f000 ff7c 	bl	8001574 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, DC2_Pin, a);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	4830      	ldr	r0, [pc, #192]	; (8000748 <main+0x240>)
 8000688:	f000 ff74 	bl	8001574 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, DC3_Pin, a);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	2102      	movs	r1, #2
 8000694:	482c      	ldr	r0, [pc, #176]	; (8000748 <main+0x240>)
 8000696:	f000 ff6d 	bl	8001574 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, DC4_Pin, b);
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a4:	4828      	ldr	r0, [pc, #160]	; (8000748 <main+0x240>)
 80006a6:	f000 ff65 	bl	8001574 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1000);
 80006aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ae:	f000 fcc3 	bl	8001038 <HAL_Delay>
	  for(int i=0;i<5;i++){
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	3301      	adds	r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	ddb4      	ble.n	8000628 <main+0x120>
	  }
	  HAL_GPIO_WritePin(GPIOC, dc1_Pin, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2104      	movs	r1, #4
 80006c2:	481f      	ldr	r0, [pc, #124]	; (8000740 <main+0x238>)
 80006c4:	f000 ff56 	bl	8001574 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, dc2_Pin, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2108      	movs	r1, #8
 80006cc:	481c      	ldr	r0, [pc, #112]	; (8000740 <main+0x238>)
 80006ce:	f000 ff51 	bl	8001574 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, dc3_Pin, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	481a      	ldr	r0, [pc, #104]	; (8000744 <main+0x23c>)
 80006da:	f000 ff4b 	bl	8001574 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, dc4_Pin, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	4817      	ldr	r0, [pc, #92]	; (8000744 <main+0x23c>)
 80006e6:	f000 ff45 	bl	8001574 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, DC1_Pin, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f0:	4815      	ldr	r0, [pc, #84]	; (8000748 <main+0x240>)
 80006f2:	f000 ff3f 	bl	8001574 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, DC2_Pin, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fc:	4812      	ldr	r0, [pc, #72]	; (8000748 <main+0x240>)
 80006fe:	f000 ff39 	bl	8001574 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, DC3_Pin, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2102      	movs	r1, #2
 8000706:	4810      	ldr	r0, [pc, #64]	; (8000748 <main+0x240>)
 8000708:	f000 ff34 	bl	8001574 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, DC4_Pin, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <main+0x240>)
 8000714:	f000 ff2e 	bl	8001574 <HAL_GPIO_WritePin>
	  HAL_Delay(10000);
 8000718:	f242 7010 	movw	r0, #10000	; 0x2710
 800071c:	f000 fc8c 	bl	8001038 <HAL_Delay>
	  htim2.Instance-> CCR1 = pwm_val;
 8000720:	e711      	b.n	8000546 <main+0x3e>
 8000722:	bf00      	nop
 8000724:	20000070 	.word	0x20000070
 8000728:	200000b8 	.word	0x200000b8
 800072c:	20000028 	.word	0x20000028
 8000730:	20000100 	.word	0x20000100
 8000734:	20000104 	.word	0x20000104
 8000738:	20000108 	.word	0x20000108
 800073c:	2000010c 	.word	0x2000010c
 8000740:	40020800 	.word	0x40020800
 8000744:	40020000 	.word	0x40020000
 8000748:	40020400 	.word	0x40020400

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	; 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2234      	movs	r2, #52	; 0x34
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fb4e 	bl	8002dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <SystemClock_Config+0xd0>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	4a28      	ldr	r2, [pc, #160]	; (800081c <SystemClock_Config+0xd0>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	; 0x40
 8000780:	4b26      	ldr	r3, [pc, #152]	; (800081c <SystemClock_Config+0xd0>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4b23      	ldr	r3, [pc, #140]	; (8000820 <SystemClock_Config+0xd4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000798:	4a21      	ldr	r2, [pc, #132]	; (8000820 <SystemClock_Config+0xd4>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <SystemClock_Config+0xd4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b4:	2310      	movs	r3, #16
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c0:	2308      	movs	r3, #8
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007c4:	2348      	movs	r3, #72	; 0x48
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 f975 	bl	8001ac8 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007e4:	f000 fa32 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2102      	movs	r1, #2
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fecf 	bl	80015a8 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000810:	f000 fa1c 	bl	8000c4c <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	; 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b096      	sub	sp, #88	; 0x58
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
 8000852:	615a      	str	r2, [r3, #20]
 8000854:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2220      	movs	r2, #32
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f002 facd 	bl	8002dfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000862:	4b3e      	ldr	r3, [pc, #248]	; (800095c <MX_TIM1_Init+0x138>)
 8000864:	4a3e      	ldr	r2, [pc, #248]	; (8000960 <MX_TIM1_Init+0x13c>)
 8000866:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000868:	4b3c      	ldr	r3, [pc, #240]	; (800095c <MX_TIM1_Init+0x138>)
 800086a:	2247      	movs	r2, #71	; 0x47
 800086c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b3b      	ldr	r3, [pc, #236]	; (800095c <MX_TIM1_Init+0x138>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000874:	4b39      	ldr	r3, [pc, #228]	; (800095c <MX_TIM1_Init+0x138>)
 8000876:	2263      	movs	r2, #99	; 0x63
 8000878:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b38      	ldr	r3, [pc, #224]	; (800095c <MX_TIM1_Init+0x138>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <MX_TIM1_Init+0x138>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b35      	ldr	r3, [pc, #212]	; (800095c <MX_TIM1_Init+0x138>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800088c:	4833      	ldr	r0, [pc, #204]	; (800095c <MX_TIM1_Init+0x138>)
 800088e:	f001 fbb9 	bl	8002004 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000898:	f000 f9d8 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008a6:	4619      	mov	r1, r3
 80008a8:	482c      	ldr	r0, [pc, #176]	; (800095c <MX_TIM1_Init+0x138>)
 80008aa:	f001 fddd 	bl	8002468 <HAL_TIM_ConfigClockSource>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80008b4:	f000 f9ca 	bl	8000c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008b8:	4828      	ldr	r0, [pc, #160]	; (800095c <MX_TIM1_Init+0x138>)
 80008ba:	f001 fbf2 	bl	80020a2 <HAL_TIM_PWM_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008c4:	f000 f9c2 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008d4:	4619      	mov	r1, r3
 80008d6:	4821      	ldr	r0, [pc, #132]	; (800095c <MX_TIM1_Init+0x138>)
 80008d8:	f002 f99e 	bl	8002c18 <HAL_TIMEx_MasterConfigSynchronization>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80008e2:	f000 f9b3 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e6:	2360      	movs	r3, #96	; 0x60
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008f2:	2300      	movs	r3, #0
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	2200      	movs	r2, #0
 8000908:	4619      	mov	r1, r3
 800090a:	4814      	ldr	r0, [pc, #80]	; (800095c <MX_TIM1_Init+0x138>)
 800090c:	f001 fcea 	bl	80022e4 <HAL_TIM_PWM_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000916:	f000 f999 	bl	8000c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800092e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4619      	mov	r1, r3
 800093c:	4807      	ldr	r0, [pc, #28]	; (800095c <MX_TIM1_Init+0x138>)
 800093e:	f002 f9e7 	bl	8002d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000948:	f000 f980 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <MX_TIM1_Init+0x138>)
 800094e:	f000 f9f7 	bl	8000d40 <HAL_TIM_MspPostInit>

}
 8000952:	bf00      	nop
 8000954:	3758      	adds	r7, #88	; 0x58
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000028 	.word	0x20000028
 8000960:	40010000 	.word	0x40010000

08000964 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08e      	sub	sp, #56	; 0x38
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
 8000990:	615a      	str	r2, [r3, #20]
 8000992:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000994:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <MX_TIM2_Init+0xfc>)
 8000996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800099a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800099c:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <MX_TIM2_Init+0xfc>)
 800099e:	2247      	movs	r2, #71	; 0x47
 80009a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <MX_TIM2_Init+0xfc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <MX_TIM2_Init+0xfc>)
 80009aa:	2263      	movs	r2, #99	; 0x63
 80009ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <MX_TIM2_Init+0xfc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <MX_TIM2_Init+0xfc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ba:	4829      	ldr	r0, [pc, #164]	; (8000a60 <MX_TIM2_Init+0xfc>)
 80009bc:	f001 fb22 	bl	8002004 <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80009c6:	f000 f941 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4822      	ldr	r0, [pc, #136]	; (8000a60 <MX_TIM2_Init+0xfc>)
 80009d8:	f001 fd46 	bl	8002468 <HAL_TIM_ConfigClockSource>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80009e2:	f000 f933 	bl	8000c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e6:	481e      	ldr	r0, [pc, #120]	; (8000a60 <MX_TIM2_Init+0xfc>)
 80009e8:	f001 fb5b 	bl	80020a2 <HAL_TIM_PWM_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80009f2:	f000 f92b 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	4619      	mov	r1, r3
 8000a04:	4816      	ldr	r0, [pc, #88]	; (8000a60 <MX_TIM2_Init+0xfc>)
 8000a06:	f002 f907 	bl	8002c18 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a10:	f000 f91c 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a14:	2360      	movs	r3, #96	; 0x60
 8000a16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_TIM2_Init+0xfc>)
 8000a2c:	f001 fc5a 	bl	80022e4 <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a36:	f000 f909 	bl	8000c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	220c      	movs	r2, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <MX_TIM2_Init+0xfc>)
 8000a42:	f001 fc4f 	bl	80022e4 <HAL_TIM_PWM_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000a4c:	f000 f8fe 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <MX_TIM2_Init+0xfc>)
 8000a52:	f000 f975 	bl	8000d40 <HAL_TIM_MspPostInit>

}
 8000a56:	bf00      	nop
 8000a58:	3738      	adds	r7, #56	; 0x38
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000070 	.word	0x20000070

08000a64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	f107 0320 	add.w	r3, r7, #32
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]
 8000a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a94:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000a96:	4a2d      	ldr	r2, [pc, #180]	; (8000b4c <MX_TIM4_Init+0xe8>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000a9c:	2247      	movs	r2, #71	; 0x47
 8000a9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000aa8:	2263      	movs	r2, #99	; 0x63
 8000aaa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ab8:	4823      	ldr	r0, [pc, #140]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000aba:	f001 faa3 	bl	8002004 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000ac4:	f000 f8c2 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481c      	ldr	r0, [pc, #112]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000ad6:	f001 fcc7 	bl	8002468 <HAL_TIM_ConfigClockSource>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000ae0:	f000 f8b4 	bl	8000c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ae4:	4818      	ldr	r0, [pc, #96]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000ae6:	f001 fadc 	bl	80020a2 <HAL_TIM_PWM_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000af0:	f000 f8ac 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000afc:	f107 0320 	add.w	r3, r7, #32
 8000b00:	4619      	mov	r1, r3
 8000b02:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000b04:	f002 f888 	bl	8002c18 <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000b0e:	f000 f89d 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b12:	2360      	movs	r3, #96	; 0x60
 8000b14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2204      	movs	r2, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000b2a:	f001 fbdb 	bl	80022e4 <HAL_TIM_PWM_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000b34:	f000 f88a 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000b3a:	f000 f901 	bl	8000d40 <HAL_TIM_MspPostInit>

}
 8000b3e:	bf00      	nop
 8000b40:	3738      	adds	r7, #56	; 0x38
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000b8 	.word	0x200000b8
 8000b4c:	40000800 	.word	0x40000800

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <MX_GPIO_Init+0xec>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a33      	ldr	r2, [pc, #204]	; (8000c3c <MX_GPIO_Init+0xec>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <MX_GPIO_Init+0xec>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <MX_GPIO_Init+0xec>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a2c      	ldr	r2, [pc, #176]	; (8000c3c <MX_GPIO_Init+0xec>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <MX_GPIO_Init+0xec>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <MX_GPIO_Init+0xec>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a25      	ldr	r2, [pc, #148]	; (8000c3c <MX_GPIO_Init+0xec>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <MX_GPIO_Init+0xec>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, dc1_Pin|dc2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	210c      	movs	r1, #12
 8000bbe:	4820      	ldr	r0, [pc, #128]	; (8000c40 <MX_GPIO_Init+0xf0>)
 8000bc0:	f000 fcd8 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC3_Pin|DC2_Pin|DC1_Pin|DC4_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f24e 0102 	movw	r1, #57346	; 0xe002
 8000bca:	481e      	ldr	r0, [pc, #120]	; (8000c44 <MX_GPIO_Init+0xf4>)
 8000bcc:	f000 fcd2 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dc4_Pin|dc3_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bd6:	481c      	ldr	r0, [pc, #112]	; (8000c48 <MX_GPIO_Init+0xf8>)
 8000bd8:	f000 fccc 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : dc1_Pin dc2_Pin */
  GPIO_InitStruct.Pin = dc1_Pin|dc2_Pin;
 8000bdc:	230c      	movs	r3, #12
 8000bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4813      	ldr	r0, [pc, #76]	; (8000c40 <MX_GPIO_Init+0xf0>)
 8000bf4:	f000 fb2a 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC3_Pin DC2_Pin DC1_Pin DC4_Pin */
  GPIO_InitStruct.Pin = DC3_Pin|DC2_Pin|DC1_Pin|DC4_Pin;
 8000bf8:	f24e 0302 	movw	r3, #57346	; 0xe002
 8000bfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_GPIO_Init+0xf4>)
 8000c12:	f000 fb1b 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : dc4_Pin dc3_Pin */
  GPIO_InitStruct.Pin = dc4_Pin|dc3_Pin;
 8000c16:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_GPIO_Init+0xf8>)
 8000c30:	f000 fb0c 	bl	800124c <HAL_GPIO_Init>

}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020000 	.word	0x40020000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <HAL_TIM_Base_MspInit+0x8c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d10e      	bne.n	8000cd8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_TIM_Base_MspInit+0x90>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <HAL_TIM_Base_MspInit+0x90>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_TIM_Base_MspInit+0x90>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cd6:	e026      	b.n	8000d26 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce0:	d10e      	bne.n	8000d00 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_TIM_Base_MspInit+0x90>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <HAL_TIM_Base_MspInit+0x90>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_TIM_Base_MspInit+0x90>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
}
 8000cfe:	e012      	b.n	8000d26 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_TIM_Base_MspInit+0x94>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10d      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_TIM_Base_MspInit+0x90>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <HAL_TIM_Base_MspInit+0x90>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <HAL_TIM_Base_MspInit+0x90>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
}
 8000d26:	bf00      	nop
 8000d28:	371c      	adds	r7, #28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40000800 	.word	0x40000800

08000d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a45      	ldr	r2, [pc, #276]	; (8000e74 <HAL_TIM_MspPostInit+0x134>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d11f      	bne.n	8000da2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a43      	ldr	r2, [pc, #268]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b41      	ldr	r3, [pc, #260]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4838      	ldr	r0, [pc, #224]	; (8000e7c <HAL_TIM_MspPostInit+0x13c>)
 8000d9c:	f000 fa56 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000da0:	e064      	b.n	8000e6c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000daa:	d13c      	bne.n	8000e26 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a30      	ldr	r2, [pc, #192]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	481f      	ldr	r0, [pc, #124]	; (8000e7c <HAL_TIM_MspPostInit+0x13c>)
 8000e00:	f000 fa24 	bl	800124c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e04:	2304      	movs	r3, #4
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <HAL_TIM_MspPostInit+0x140>)
 8000e20:	f000 fa14 	bl	800124c <HAL_GPIO_Init>
}
 8000e24:	e022      	b.n	8000e6c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <HAL_TIM_MspPostInit+0x144>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d11d      	bne.n	8000e6c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_TIM_MspPostInit+0x138>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <HAL_TIM_MspPostInit+0x140>)
 8000e68:	f000 f9f0 	bl	800124c <HAL_GPIO_Init>
}
 8000e6c:	bf00      	nop
 8000e6e:	3730      	adds	r7, #48	; 0x30
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40000800 	.word	0x40000800

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f890 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd7 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f001 ff41 	bl	8002db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fae9 	bl	8000508 <main>
  bx  lr    
 8000f36:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f44:	08002e44 	.word	0x08002e44
  ldr r2, =_sbss
 8000f48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f4c:	20000114 	.word	0x20000114

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f931 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	200f      	movs	r0, #15
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fe66 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f93b 	bl	8001232 <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd4:	f000 f911 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	20000110 	.word	0x20000110

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000110 	.word	0x20000110

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_Delay+0x44>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff47 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff5c 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff8e 	bl	8001138 <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffb0 	bl	80011a0 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e165      	b.n	8001534 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8154 	bne.w	800152e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d005      	beq.n	800129e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129a:	2b02      	cmp	r3, #2
 800129c:	d130      	bne.n	8001300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 0201 	and.w	r2, r3, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b03      	cmp	r3, #3
 800130a:	d017      	beq.n	800133c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d123      	bne.n	8001390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80ae 	beq.w	800152e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <HAL_GPIO_Init+0x300>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a5c      	ldr	r2, [pc, #368]	; (800154c <HAL_GPIO_Init+0x300>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b5a      	ldr	r3, [pc, #360]	; (800154c <HAL_GPIO_Init+0x300>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ee:	4a58      	ldr	r2, [pc, #352]	; (8001550 <HAL_GPIO_Init+0x304>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <HAL_GPIO_Init+0x308>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d025      	beq.n	8001466 <HAL_GPIO_Init+0x21a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4e      	ldr	r2, [pc, #312]	; (8001558 <HAL_GPIO_Init+0x30c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01f      	beq.n	8001462 <HAL_GPIO_Init+0x216>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4d      	ldr	r2, [pc, #308]	; (800155c <HAL_GPIO_Init+0x310>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_GPIO_Init+0x212>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4c      	ldr	r2, [pc, #304]	; (8001560 <HAL_GPIO_Init+0x314>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0x20e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4b      	ldr	r2, [pc, #300]	; (8001564 <HAL_GPIO_Init+0x318>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00d      	beq.n	8001456 <HAL_GPIO_Init+0x20a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <HAL_GPIO_Init+0x31c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x206>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a49      	ldr	r2, [pc, #292]	; (800156c <HAL_GPIO_Init+0x320>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d101      	bne.n	800144e <HAL_GPIO_Init+0x202>
 800144a:	2306      	movs	r3, #6
 800144c:	e00c      	b.n	8001468 <HAL_GPIO_Init+0x21c>
 800144e:	2307      	movs	r3, #7
 8001450:	e00a      	b.n	8001468 <HAL_GPIO_Init+0x21c>
 8001452:	2305      	movs	r3, #5
 8001454:	e008      	b.n	8001468 <HAL_GPIO_Init+0x21c>
 8001456:	2304      	movs	r3, #4
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x21c>
 800145a:	2303      	movs	r3, #3
 800145c:	e004      	b.n	8001468 <HAL_GPIO_Init+0x21c>
 800145e:	2302      	movs	r3, #2
 8001460:	e002      	b.n	8001468 <HAL_GPIO_Init+0x21c>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x21c>
 8001466:	2300      	movs	r3, #0
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	f002 0203 	and.w	r2, r2, #3
 800146e:	0092      	lsls	r2, r2, #2
 8001470:	4093      	lsls	r3, r2
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001478:	4935      	ldr	r1, [pc, #212]	; (8001550 <HAL_GPIO_Init+0x304>)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001486:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <HAL_GPIO_Init+0x324>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014aa:	4a31      	ldr	r2, [pc, #196]	; (8001570 <HAL_GPIO_Init+0x324>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_GPIO_Init+0x324>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <HAL_GPIO_Init+0x324>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_GPIO_Init+0x324>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <HAL_GPIO_Init+0x324>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_GPIO_Init+0x324>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <HAL_GPIO_Init+0x324>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3301      	adds	r3, #1
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	f67f ae96 	bls.w	8001268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40013800 	.word	0x40013800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	40020800 	.word	0x40020800
 8001560:	40020c00 	.word	0x40020c00
 8001564:	40021000 	.word	0x40021000
 8001568:	40021400 	.word	0x40021400
 800156c:	40021800 	.word	0x40021800
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0cc      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015bc:	4b68      	ldr	r3, [pc, #416]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d90c      	bls.n	80015e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b65      	ldr	r3, [pc, #404]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0b8      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d020      	beq.n	8001632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015fc:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a58      	ldr	r2, [pc, #352]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4a52      	ldr	r2, [pc, #328]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800161e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001620:	4b50      	ldr	r3, [pc, #320]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	494d      	ldr	r1, [pc, #308]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d044      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d119      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e07f      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d003      	beq.n	8001666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001662:	2b03      	cmp	r3, #3
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001666:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e06f      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e067      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001686:	4b37      	ldr	r3, [pc, #220]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f023 0203 	bic.w	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4934      	ldr	r1, [pc, #208]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	4313      	orrs	r3, r2
 8001696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001698:	f7ff fcc2 	bl	8001020 <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a0:	f7ff fcbe 	bl	8001020 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e04f      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 020c 	and.w	r2, r3, #12
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1eb      	bne.n	80016a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c8:	4b25      	ldr	r3, [pc, #148]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d20c      	bcs.n	80016f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e032      	b.n	8001756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4916      	ldr	r1, [pc, #88]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	490e      	ldr	r1, [pc, #56]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800172e:	f000 f821 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 8001732:	4602      	mov	r2, r0
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	490a      	ldr	r1, [pc, #40]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	5ccb      	ldrb	r3, [r1, r3]
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fc22 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00
 8001764:	40023800 	.word	0x40023800
 8001768:	08002e24 	.word	0x08002e24
 800176c:	20000000 	.word	0x20000000
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001778:	b0a6      	sub	sp, #152	; 0x98
 800177a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800179a:	4bc8      	ldr	r3, [pc, #800]	; (8001abc <HAL_RCC_GetSysClockFreq+0x348>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	f200 817e 	bhi.w	8001aa4 <HAL_RCC_GetSysClockFreq+0x330>
 80017a8:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017e5 	.word	0x080017e5
 80017b4:	08001aa5 	.word	0x08001aa5
 80017b8:	08001aa5 	.word	0x08001aa5
 80017bc:	08001aa5 	.word	0x08001aa5
 80017c0:	080017ed 	.word	0x080017ed
 80017c4:	08001aa5 	.word	0x08001aa5
 80017c8:	08001aa5 	.word	0x08001aa5
 80017cc:	08001aa5 	.word	0x08001aa5
 80017d0:	080017f5 	.word	0x080017f5
 80017d4:	08001aa5 	.word	0x08001aa5
 80017d8:	08001aa5 	.word	0x08001aa5
 80017dc:	08001aa5 	.word	0x08001aa5
 80017e0:	0800195f 	.word	0x0800195f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4bb6      	ldr	r3, [pc, #728]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80017e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80017ea:	e15f      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ec:	4bb5      	ldr	r3, [pc, #724]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x350>)
 80017ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80017f2:	e15b      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f4:	4bb1      	ldr	r3, [pc, #708]	; (8001abc <HAL_RCC_GetSysClockFreq+0x348>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001800:	4bae      	ldr	r3, [pc, #696]	; (8001abc <HAL_RCC_GetSysClockFreq+0x348>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d031      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180c:	4bab      	ldr	r3, [pc, #684]	; (8001abc <HAL_RCC_GetSysClockFreq+0x348>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	2200      	movs	r2, #0
 8001814:	66bb      	str	r3, [r7, #104]	; 0x68
 8001816:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800181a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181e:	663b      	str	r3, [r7, #96]	; 0x60
 8001820:	2300      	movs	r3, #0
 8001822:	667b      	str	r3, [r7, #100]	; 0x64
 8001824:	4ba7      	ldr	r3, [pc, #668]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001826:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800182a:	462a      	mov	r2, r5
 800182c:	fb03 f202 	mul.w	r2, r3, r2
 8001830:	2300      	movs	r3, #0
 8001832:	4621      	mov	r1, r4
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	4aa2      	ldr	r2, [pc, #648]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x350>)
 800183c:	4621      	mov	r1, r4
 800183e:	fba1 1202 	umull	r1, r2, r1, r2
 8001842:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001844:	460a      	mov	r2, r1
 8001846:	67ba      	str	r2, [r7, #120]	; 0x78
 8001848:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800184a:	4413      	add	r3, r2
 800184c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800184e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001852:	2200      	movs	r2, #0
 8001854:	65bb      	str	r3, [r7, #88]	; 0x58
 8001856:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001858:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800185c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001860:	f7fe fcd0 	bl	8000204 <__aeabi_uldivmod>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4613      	mov	r3, r2
 800186a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800186e:	e064      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001870:	4b92      	ldr	r3, [pc, #584]	; (8001abc <HAL_RCC_GetSysClockFreq+0x348>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	2200      	movs	r2, #0
 8001878:	653b      	str	r3, [r7, #80]	; 0x50
 800187a:	657a      	str	r2, [r7, #84]	; 0x54
 800187c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800187e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001882:	64bb      	str	r3, [r7, #72]	; 0x48
 8001884:	2300      	movs	r3, #0
 8001886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001888:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800188c:	4622      	mov	r2, r4
 800188e:	462b      	mov	r3, r5
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	f04f 0100 	mov.w	r1, #0
 8001898:	0159      	lsls	r1, r3, #5
 800189a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800189e:	0150      	lsls	r0, r2, #5
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4621      	mov	r1, r4
 80018a6:	1a51      	subs	r1, r2, r1
 80018a8:	6139      	str	r1, [r7, #16]
 80018aa:	4629      	mov	r1, r5
 80018ac:	eb63 0301 	sbc.w	r3, r3, r1
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018be:	4659      	mov	r1, fp
 80018c0:	018b      	lsls	r3, r1, #6
 80018c2:	4651      	mov	r1, sl
 80018c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c8:	4651      	mov	r1, sl
 80018ca:	018a      	lsls	r2, r1, #6
 80018cc:	4651      	mov	r1, sl
 80018ce:	ebb2 0801 	subs.w	r8, r2, r1
 80018d2:	4659      	mov	r1, fp
 80018d4:	eb63 0901 	sbc.w	r9, r3, r1
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018ec:	4690      	mov	r8, r2
 80018ee:	4699      	mov	r9, r3
 80018f0:	4623      	mov	r3, r4
 80018f2:	eb18 0303 	adds.w	r3, r8, r3
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	462b      	mov	r3, r5
 80018fa:	eb49 0303 	adc.w	r3, r9, r3
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800190c:	4629      	mov	r1, r5
 800190e:	028b      	lsls	r3, r1, #10
 8001910:	4621      	mov	r1, r4
 8001912:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001916:	4621      	mov	r1, r4
 8001918:	028a      	lsls	r2, r1, #10
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001922:	2200      	movs	r2, #0
 8001924:	643b      	str	r3, [r7, #64]	; 0x40
 8001926:	647a      	str	r2, [r7, #68]	; 0x44
 8001928:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800192c:	f7fe fc6a 	bl	8000204 <__aeabi_uldivmod>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4613      	mov	r3, r2
 8001936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800193a:	4b60      	ldr	r3, [pc, #384]	; (8001abc <HAL_RCC_GetSysClockFreq+0x348>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0c1b      	lsrs	r3, r3, #16
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	3301      	adds	r3, #1
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800194c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800195c:	e0a6      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_RCC_GetSysClockFreq+0x348>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001966:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_RCC_GetSysClockFreq+0x348>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d02a      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001976:	4b51      	ldr	r3, [pc, #324]	; (8001abc <HAL_RCC_GetSysClockFreq+0x348>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	099b      	lsrs	r3, r3, #6
 800197c:	2200      	movs	r2, #0
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001980:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001984:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001988:	2100      	movs	r1, #0
 800198a:	4b4e      	ldr	r3, [pc, #312]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x350>)
 800198c:	fb03 f201 	mul.w	r2, r3, r1
 8001990:	2300      	movs	r3, #0
 8001992:	fb00 f303 	mul.w	r3, r0, r3
 8001996:	4413      	add	r3, r2
 8001998:	4a4a      	ldr	r2, [pc, #296]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x350>)
 800199a:	fba0 1202 	umull	r1, r2, r0, r2
 800199e:	677a      	str	r2, [r7, #116]	; 0x74
 80019a0:	460a      	mov	r2, r1
 80019a2:	673a      	str	r2, [r7, #112]	; 0x70
 80019a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80019a6:	4413      	add	r3, r2
 80019a8:	677b      	str	r3, [r7, #116]	; 0x74
 80019aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019ae:	2200      	movs	r2, #0
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
 80019b2:	637a      	str	r2, [r7, #52]	; 0x34
 80019b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019b8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80019bc:	f7fe fc22 	bl	8000204 <__aeabi_uldivmod>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4613      	mov	r3, r2
 80019c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019ca:	e05b      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019cc:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <HAL_RCC_GetSysClockFreq+0x348>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	099b      	lsrs	r3, r3, #6
 80019d2:	2200      	movs	r2, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019de:	623b      	str	r3, [r7, #32]
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019e8:	4642      	mov	r2, r8
 80019ea:	464b      	mov	r3, r9
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	0159      	lsls	r1, r3, #5
 80019f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019fa:	0150      	lsls	r0, r2, #5
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4641      	mov	r1, r8
 8001a02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a06:	4649      	mov	r1, r9
 8001a08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a20:	ebb2 040a 	subs.w	r4, r2, sl
 8001a24:	eb63 050b 	sbc.w	r5, r3, fp
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	00eb      	lsls	r3, r5, #3
 8001a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a36:	00e2      	lsls	r2, r4, #3
 8001a38:	4614      	mov	r4, r2
 8001a3a:	461d      	mov	r5, r3
 8001a3c:	4643      	mov	r3, r8
 8001a3e:	18e3      	adds	r3, r4, r3
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	464b      	mov	r3, r9
 8001a44:	eb45 0303 	adc.w	r3, r5, r3
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a56:	4629      	mov	r1, r5
 8001a58:	028b      	lsls	r3, r1, #10
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a60:	4621      	mov	r1, r4
 8001a62:	028a      	lsls	r2, r1, #10
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	61fa      	str	r2, [r7, #28]
 8001a72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a76:	f7fe fbc5 	bl	8000204 <__aeabi_uldivmod>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4613      	mov	r3, r2
 8001a80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_RCC_GetSysClockFreq+0x348>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	0f1b      	lsrs	r3, r3, #28
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001a92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001aa2:	e003      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001aaa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3798      	adds	r7, #152	; 0x98
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	017d7840 	.word	0x017d7840

08001ac8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e28d      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8083 	beq.w	8001bee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ae8:	4b94      	ldr	r3, [pc, #592]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d019      	beq.n	8001b28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001af4:	4b91      	ldr	r3, [pc, #580]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b00:	4b8e      	ldr	r3, [pc, #568]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b0c:	d00c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0e:	4b8b      	ldr	r3, [pc, #556]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d112      	bne.n	8001b40 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1a:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b26:	d10b      	bne.n	8001b40 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	4b84      	ldr	r3, [pc, #528]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d05b      	beq.n	8001bec <HAL_RCC_OscConfig+0x124>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d157      	bne.n	8001bec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e25a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d106      	bne.n	8001b58 <HAL_RCC_OscConfig+0x90>
 8001b4a:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7b      	ldr	r2, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e01d      	b.n	8001b94 <HAL_RCC_OscConfig+0xcc>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0xb4>
 8001b62:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a75      	ldr	r2, [pc, #468]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b73      	ldr	r3, [pc, #460]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a72      	ldr	r2, [pc, #456]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xcc>
 8001b7c:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a6e      	ldr	r2, [pc, #440]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b6c      	ldr	r3, [pc, #432]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a6b      	ldr	r2, [pc, #428]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fa40 	bl	8001020 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fa3c 	bl	8001020 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e21f      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xdc>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa2c 	bl	8001020 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fa28 	bl	8001020 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e20b      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	4b57      	ldr	r3, [pc, #348]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x104>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d06f      	beq.n	8001cda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bfa:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d017      	beq.n	8001c36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c06:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c12:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d11c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2a:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x186>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e1d3      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4937      	ldr	r1, [pc, #220]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	e03a      	b.n	8001cda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c6c:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <HAL_RCC_OscConfig+0x278>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff f9d5 	bl	8001020 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff f9d1 	bl	8001020 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e1b4      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4925      	ldr	r1, [pc, #148]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
 8001cac:	e015      	b.n	8001cda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <HAL_RCC_OscConfig+0x278>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f9b4 	bl	8001020 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f9b0 	bl	8001020 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e193      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d036      	beq.n	8001d54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d016      	beq.n	8001d1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f994 	bl	8001020 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f990 	bl	8001020 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e173      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x234>
 8001d1a:	e01b      	b.n	8001d54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7ff f97d 	bl	8001020 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	e00e      	b.n	8001d48 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2a:	f7ff f979 	bl	8001020 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d907      	bls.n	8001d48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e15c      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	42470000 	.word	0x42470000
 8001d44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	4b8a      	ldr	r3, [pc, #552]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ea      	bne.n	8001d2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8097 	beq.w	8001e90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4b83      	ldr	r3, [pc, #524]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10f      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	4b7f      	ldr	r3, [pc, #508]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a7e      	ldr	r2, [pc, #504]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b7c      	ldr	r3, [pc, #496]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d92:	4b79      	ldr	r3, [pc, #484]	; (8001f78 <HAL_RCC_OscConfig+0x4b0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d118      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9e:	4b76      	ldr	r3, [pc, #472]	; (8001f78 <HAL_RCC_OscConfig+0x4b0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a75      	ldr	r2, [pc, #468]	; (8001f78 <HAL_RCC_OscConfig+0x4b0>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001daa:	f7ff f939 	bl	8001020 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db2:	f7ff f935 	bl	8001020 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e118      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	4b6c      	ldr	r3, [pc, #432]	; (8001f78 <HAL_RCC_OscConfig+0x4b0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x31e>
 8001dd8:	4b66      	ldr	r3, [pc, #408]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a65      	ldr	r2, [pc, #404]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0x358>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x340>
 8001dee:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a60      	ldr	r2, [pc, #384]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	4b5e      	ldr	r3, [pc, #376]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a5d      	ldr	r2, [pc, #372]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
 8001e06:	e00b      	b.n	8001e20 <HAL_RCC_OscConfig+0x358>
 8001e08:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	4a59      	ldr	r2, [pc, #356]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
 8001e14:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	4a56      	ldr	r2, [pc, #344]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001e1a:	f023 0304 	bic.w	r3, r3, #4
 8001e1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d015      	beq.n	8001e54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff f8fa 	bl	8001020 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7ff f8f6 	bl	8001020 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e0d7      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e46:	4b4b      	ldr	r3, [pc, #300]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0ee      	beq.n	8001e30 <HAL_RCC_OscConfig+0x368>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff f8e4 	bl	8001020 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f8e0 	bl	8001020 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e0c1      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e72:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ee      	bne.n	8001e5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d105      	bne.n	8001e90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e84:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80ad 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d060      	beq.n	8001f68 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d145      	bne.n	8001f3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <HAL_RCC_OscConfig+0x4b4>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f8b4 	bl	8001020 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff f8b0 	bl	8001020 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e093      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	019b      	lsls	r3, r3, #6
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	041b      	lsls	r3, r3, #16
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	071b      	lsls	r3, r3, #28
 8001f06:	491b      	ldr	r1, [pc, #108]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x4b4>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff f885 	bl	8001020 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff f881 	bl	8001020 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e064      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x452>
 8001f38:	e05c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_RCC_OscConfig+0x4b4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f86e 	bl	8001020 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff f86a 	bl	8001020 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e04d      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x4ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x480>
 8001f66:	e045      	b.n	8001ff4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e040      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_RCC_OscConfig+0x538>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d030      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d129      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d122      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d119      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10f      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800

08002004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e041      	b.n	800209a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fe3c 	bl	8000ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3304      	adds	r3, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f000 fad8 	bl	80025f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e041      	b.n	8002138 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d106      	bne.n	80020ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f839 	bl	8002140 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2202      	movs	r2, #2
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3304      	adds	r3, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f000 fa89 	bl	80025f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_TIM_PWM_Start+0x24>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	e022      	b.n	80021be <HAL_TIM_PWM_Start+0x6a>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b04      	cmp	r3, #4
 800217c:	d109      	bne.n	8002192 <HAL_TIM_PWM_Start+0x3e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	bf14      	ite	ne
 800218a:	2301      	movne	r3, #1
 800218c:	2300      	moveq	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	e015      	b.n	80021be <HAL_TIM_PWM_Start+0x6a>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d109      	bne.n	80021ac <HAL_TIM_PWM_Start+0x58>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e008      	b.n	80021be <HAL_TIM_PWM_Start+0x6a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e07c      	b.n	80022c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d104      	bne.n	80021d6 <HAL_TIM_PWM_Start+0x82>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d4:	e013      	b.n	80021fe <HAL_TIM_PWM_Start+0xaa>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d104      	bne.n	80021e6 <HAL_TIM_PWM_Start+0x92>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e4:	e00b      	b.n	80021fe <HAL_TIM_PWM_Start+0xaa>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d104      	bne.n	80021f6 <HAL_TIM_PWM_Start+0xa2>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f4:	e003      	b.n	80021fe <HAL_TIM_PWM_Start+0xaa>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2201      	movs	r2, #1
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fce0 	bl	8002bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <HAL_TIM_PWM_Start+0x174>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d004      	beq.n	8002220 <HAL_TIM_PWM_Start+0xcc>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a2c      	ldr	r2, [pc, #176]	; (80022cc <HAL_TIM_PWM_Start+0x178>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_TIM_PWM_Start+0xd0>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_TIM_PWM_Start+0xd2>
 8002224:	2300      	movs	r3, #0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_TIM_PWM_Start+0x174>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d022      	beq.n	800228a <HAL_TIM_PWM_Start+0x136>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224c:	d01d      	beq.n	800228a <HAL_TIM_PWM_Start+0x136>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <HAL_TIM_PWM_Start+0x17c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d018      	beq.n	800228a <HAL_TIM_PWM_Start+0x136>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_TIM_PWM_Start+0x180>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_TIM_PWM_Start+0x136>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <HAL_TIM_PWM_Start+0x184>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00e      	beq.n	800228a <HAL_TIM_PWM_Start+0x136>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a16      	ldr	r2, [pc, #88]	; (80022cc <HAL_TIM_PWM_Start+0x178>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d009      	beq.n	800228a <HAL_TIM_PWM_Start+0x136>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a18      	ldr	r2, [pc, #96]	; (80022dc <HAL_TIM_PWM_Start+0x188>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d004      	beq.n	800228a <HAL_TIM_PWM_Start+0x136>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <HAL_TIM_PWM_Start+0x18c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d111      	bne.n	80022ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b06      	cmp	r3, #6
 800229a:	d010      	beq.n	80022be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ac:	e007      	b.n	80022be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40010000 	.word	0x40010000
 80022cc:	40010400 	.word	0x40010400
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000800 	.word	0x40000800
 80022d8:	40000c00 	.word	0x40000c00
 80022dc:	40014000 	.word	0x40014000
 80022e0:	40001800 	.word	0x40001800

080022e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022fe:	2302      	movs	r3, #2
 8002300:	e0ae      	b.n	8002460 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	f200 809f 	bhi.w	8002450 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002312:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	0800234d 	.word	0x0800234d
 800231c:	08002451 	.word	0x08002451
 8002320:	08002451 	.word	0x08002451
 8002324:	08002451 	.word	0x08002451
 8002328:	0800238d 	.word	0x0800238d
 800232c:	08002451 	.word	0x08002451
 8002330:	08002451 	.word	0x08002451
 8002334:	08002451 	.word	0x08002451
 8002338:	080023cf 	.word	0x080023cf
 800233c:	08002451 	.word	0x08002451
 8002340:	08002451 	.word	0x08002451
 8002344:	08002451 	.word	0x08002451
 8002348:	0800240f 	.word	0x0800240f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f9f0 	bl	8002738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0208 	orr.w	r2, r2, #8
 8002366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0204 	bic.w	r2, r2, #4
 8002376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6999      	ldr	r1, [r3, #24]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	619a      	str	r2, [r3, #24]
      break;
 800238a:	e064      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fa40 	bl	8002818 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6999      	ldr	r1, [r3, #24]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	021a      	lsls	r2, r3, #8
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	619a      	str	r2, [r3, #24]
      break;
 80023cc:	e043      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fa95 	bl	8002904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0208 	orr.w	r2, r2, #8
 80023e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0204 	bic.w	r2, r2, #4
 80023f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	69d9      	ldr	r1, [r3, #28]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	61da      	str	r2, [r3, #28]
      break;
 800240c:	e023      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fae9 	bl	80029ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69d9      	ldr	r1, [r3, #28]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	021a      	lsls	r2, r3, #8
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	61da      	str	r2, [r3, #28]
      break;
 800244e:	e002      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
      break;
 8002454:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800245e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_TIM_ConfigClockSource+0x1c>
 8002480:	2302      	movs	r3, #2
 8002482:	e0b4      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x186>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024bc:	d03e      	beq.n	800253c <HAL_TIM_ConfigClockSource+0xd4>
 80024be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c2:	f200 8087 	bhi.w	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ca:	f000 8086 	beq.w	80025da <HAL_TIM_ConfigClockSource+0x172>
 80024ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d2:	d87f      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b70      	cmp	r3, #112	; 0x70
 80024d6:	d01a      	beq.n	800250e <HAL_TIM_ConfigClockSource+0xa6>
 80024d8:	2b70      	cmp	r3, #112	; 0x70
 80024da:	d87b      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b60      	cmp	r3, #96	; 0x60
 80024de:	d050      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x11a>
 80024e0:	2b60      	cmp	r3, #96	; 0x60
 80024e2:	d877      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b50      	cmp	r3, #80	; 0x50
 80024e6:	d03c      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0xfa>
 80024e8:	2b50      	cmp	r3, #80	; 0x50
 80024ea:	d873      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d058      	beq.n	80025a2 <HAL_TIM_ConfigClockSource+0x13a>
 80024f0:	2b40      	cmp	r3, #64	; 0x40
 80024f2:	d86f      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024f4:	2b30      	cmp	r3, #48	; 0x30
 80024f6:	d064      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x15a>
 80024f8:	2b30      	cmp	r3, #48	; 0x30
 80024fa:	d86b      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d060      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002500:	2b20      	cmp	r3, #32
 8002502:	d867      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d05c      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002508:	2b10      	cmp	r3, #16
 800250a:	d05a      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x15a>
 800250c:	e062      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6899      	ldr	r1, [r3, #8]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f000 fb35 	bl	8002b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	609a      	str	r2, [r3, #8]
      break;
 800253a:	e04f      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6899      	ldr	r1, [r3, #8]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f000 fb1e 	bl	8002b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800255e:	609a      	str	r2, [r3, #8]
      break;
 8002560:	e03c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	461a      	mov	r2, r3
 8002570:	f000 fa92 	bl	8002a98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2150      	movs	r1, #80	; 0x50
 800257a:	4618      	mov	r0, r3
 800257c:	f000 faeb 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002580:	e02c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	461a      	mov	r2, r3
 8002590:	f000 fab1 	bl	8002af6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2160      	movs	r1, #96	; 0x60
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fadb 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 80025a0:	e01c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f000 fa72 	bl	8002a98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2140      	movs	r1, #64	; 0x40
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 facb 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 80025c0:	e00c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f000 fac2 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 80025d2:	e003      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e000      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a40      	ldr	r2, [pc, #256]	; (800270c <TIM_Base_SetConfig+0x114>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d013      	beq.n	8002638 <TIM_Base_SetConfig+0x40>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002616:	d00f      	beq.n	8002638 <TIM_Base_SetConfig+0x40>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a3d      	ldr	r2, [pc, #244]	; (8002710 <TIM_Base_SetConfig+0x118>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00b      	beq.n	8002638 <TIM_Base_SetConfig+0x40>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a3c      	ldr	r2, [pc, #240]	; (8002714 <TIM_Base_SetConfig+0x11c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d007      	beq.n	8002638 <TIM_Base_SetConfig+0x40>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a3b      	ldr	r2, [pc, #236]	; (8002718 <TIM_Base_SetConfig+0x120>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <TIM_Base_SetConfig+0x40>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a3a      	ldr	r2, [pc, #232]	; (800271c <TIM_Base_SetConfig+0x124>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d108      	bne.n	800264a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a2f      	ldr	r2, [pc, #188]	; (800270c <TIM_Base_SetConfig+0x114>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d02b      	beq.n	80026aa <TIM_Base_SetConfig+0xb2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002658:	d027      	beq.n	80026aa <TIM_Base_SetConfig+0xb2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a2c      	ldr	r2, [pc, #176]	; (8002710 <TIM_Base_SetConfig+0x118>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d023      	beq.n	80026aa <TIM_Base_SetConfig+0xb2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <TIM_Base_SetConfig+0x11c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01f      	beq.n	80026aa <TIM_Base_SetConfig+0xb2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <TIM_Base_SetConfig+0x120>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01b      	beq.n	80026aa <TIM_Base_SetConfig+0xb2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a29      	ldr	r2, [pc, #164]	; (800271c <TIM_Base_SetConfig+0x124>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d017      	beq.n	80026aa <TIM_Base_SetConfig+0xb2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a28      	ldr	r2, [pc, #160]	; (8002720 <TIM_Base_SetConfig+0x128>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <TIM_Base_SetConfig+0xb2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a27      	ldr	r2, [pc, #156]	; (8002724 <TIM_Base_SetConfig+0x12c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00f      	beq.n	80026aa <TIM_Base_SetConfig+0xb2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a26      	ldr	r2, [pc, #152]	; (8002728 <TIM_Base_SetConfig+0x130>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00b      	beq.n	80026aa <TIM_Base_SetConfig+0xb2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a25      	ldr	r2, [pc, #148]	; (800272c <TIM_Base_SetConfig+0x134>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <TIM_Base_SetConfig+0xb2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a24      	ldr	r2, [pc, #144]	; (8002730 <TIM_Base_SetConfig+0x138>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d003      	beq.n	80026aa <TIM_Base_SetConfig+0xb2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a23      	ldr	r2, [pc, #140]	; (8002734 <TIM_Base_SetConfig+0x13c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d108      	bne.n	80026bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <TIM_Base_SetConfig+0x114>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d003      	beq.n	80026f0 <TIM_Base_SetConfig+0xf8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a0c      	ldr	r2, [pc, #48]	; (800271c <TIM_Base_SetConfig+0x124>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d103      	bne.n	80026f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	615a      	str	r2, [r3, #20]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40010000 	.word	0x40010000
 8002710:	40000400 	.word	0x40000400
 8002714:	40000800 	.word	0x40000800
 8002718:	40000c00 	.word	0x40000c00
 800271c:	40010400 	.word	0x40010400
 8002720:	40014000 	.word	0x40014000
 8002724:	40014400 	.word	0x40014400
 8002728:	40014800 	.word	0x40014800
 800272c:	40001800 	.word	0x40001800
 8002730:	40001c00 	.word	0x40001c00
 8002734:	40002000 	.word	0x40002000

08002738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f023 0201 	bic.w	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f023 0302 	bic.w	r3, r3, #2
 8002780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a20      	ldr	r2, [pc, #128]	; (8002810 <TIM_OC1_SetConfig+0xd8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d003      	beq.n	800279c <TIM_OC1_SetConfig+0x64>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <TIM_OC1_SetConfig+0xdc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d10c      	bne.n	80027b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f023 0308 	bic.w	r3, r3, #8
 80027a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a15      	ldr	r2, [pc, #84]	; (8002810 <TIM_OC1_SetConfig+0xd8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d003      	beq.n	80027c6 <TIM_OC1_SetConfig+0x8e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <TIM_OC1_SetConfig+0xdc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d111      	bne.n	80027ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	621a      	str	r2, [r3, #32]
}
 8002804:	bf00      	nop
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40010000 	.word	0x40010000
 8002814:	40010400 	.word	0x40010400

08002818 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f023 0210 	bic.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f023 0320 	bic.w	r3, r3, #32
 8002862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a22      	ldr	r2, [pc, #136]	; (80028fc <TIM_OC2_SetConfig+0xe4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d003      	beq.n	8002880 <TIM_OC2_SetConfig+0x68>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a21      	ldr	r2, [pc, #132]	; (8002900 <TIM_OC2_SetConfig+0xe8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d10d      	bne.n	800289c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800289a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <TIM_OC2_SetConfig+0xe4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <TIM_OC2_SetConfig+0x94>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <TIM_OC2_SetConfig+0xe8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d113      	bne.n	80028d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	621a      	str	r2, [r3, #32]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40010000 	.word	0x40010000
 8002900:	40010400 	.word	0x40010400

08002904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0303 	bic.w	r3, r3, #3
 800293a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800294c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <TIM_OC3_SetConfig+0xe0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d003      	beq.n	800296a <TIM_OC3_SetConfig+0x66>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a20      	ldr	r2, [pc, #128]	; (80029e8 <TIM_OC3_SetConfig+0xe4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10d      	bne.n	8002986 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <TIM_OC3_SetConfig+0xe0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d003      	beq.n	8002996 <TIM_OC3_SetConfig+0x92>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <TIM_OC3_SetConfig+0xe4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d113      	bne.n	80029be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800299c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	621a      	str	r2, [r3, #32]
}
 80029d8:	bf00      	nop
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40010400 	.word	0x40010400

080029ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	031b      	lsls	r3, r3, #12
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <TIM_OC4_SetConfig+0xa4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <TIM_OC4_SetConfig+0x68>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <TIM_OC4_SetConfig+0xa8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d109      	bne.n	8002a68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	621a      	str	r2, [r3, #32]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40010400 	.word	0x40010400

08002a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f023 0201 	bic.w	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f023 030a 	bic.w	r3, r3, #10
 8002ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	621a      	str	r2, [r3, #32]
}
 8002aea:	bf00      	nop
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b087      	sub	sp, #28
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f023 0210 	bic.w	r2, r3, #16
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	031b      	lsls	r3, r3, #12
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	621a      	str	r2, [r3, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f043 0307 	orr.w	r3, r3, #7
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	021a      	lsls	r2, r3, #8
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	609a      	str	r2, [r3, #8]
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	2201      	movs	r2, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a1a      	ldr	r2, [r3, #32]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	401a      	ands	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a1a      	ldr	r2, [r3, #32]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	621a      	str	r2, [r3, #32]
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e05a      	b.n	8002ce6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a21      	ldr	r2, [pc, #132]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d022      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7c:	d01d      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d018      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1a      	ldr	r2, [pc, #104]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00e      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d009      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40000c00 	.word	0x40000c00
 8002d04:	40010400 	.word	0x40010400
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40001800 	.word	0x40001800

08002d10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e03d      	b.n	8002da8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <__libc_init_array>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	4d0d      	ldr	r5, [pc, #52]	; (8002dec <__libc_init_array+0x38>)
 8002db8:	4c0d      	ldr	r4, [pc, #52]	; (8002df0 <__libc_init_array+0x3c>)
 8002dba:	1b64      	subs	r4, r4, r5
 8002dbc:	10a4      	asrs	r4, r4, #2
 8002dbe:	2600      	movs	r6, #0
 8002dc0:	42a6      	cmp	r6, r4
 8002dc2:	d109      	bne.n	8002dd8 <__libc_init_array+0x24>
 8002dc4:	4d0b      	ldr	r5, [pc, #44]	; (8002df4 <__libc_init_array+0x40>)
 8002dc6:	4c0c      	ldr	r4, [pc, #48]	; (8002df8 <__libc_init_array+0x44>)
 8002dc8:	f000 f820 	bl	8002e0c <_init>
 8002dcc:	1b64      	subs	r4, r4, r5
 8002dce:	10a4      	asrs	r4, r4, #2
 8002dd0:	2600      	movs	r6, #0
 8002dd2:	42a6      	cmp	r6, r4
 8002dd4:	d105      	bne.n	8002de2 <__libc_init_array+0x2e>
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ddc:	4798      	blx	r3
 8002dde:	3601      	adds	r6, #1
 8002de0:	e7ee      	b.n	8002dc0 <__libc_init_array+0xc>
 8002de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de6:	4798      	blx	r3
 8002de8:	3601      	adds	r6, #1
 8002dea:	e7f2      	b.n	8002dd2 <__libc_init_array+0x1e>
 8002dec:	08002e3c 	.word	0x08002e3c
 8002df0:	08002e3c 	.word	0x08002e3c
 8002df4:	08002e3c 	.word	0x08002e3c
 8002df8:	08002e40 	.word	0x08002e40

08002dfc <memset>:
 8002dfc:	4402      	add	r2, r0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d100      	bne.n	8002e06 <memset+0xa>
 8002e04:	4770      	bx	lr
 8002e06:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0a:	e7f9      	b.n	8002e00 <memset+0x4>

08002e0c <_init>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr

08002e18 <_fini>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr
